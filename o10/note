modulok:
    - a hosszabb projekteket jobb lenne szétvágdosni kisebbekre
    - így könnyebb karbantartani, a hasznos fv.-et be tudjuk hivatkozni ezpz
    
    - import paranccsal tudunk behúzni külső modulokat -> ha csak ennyit írunk a szimbólum táblázatba még nem kerül be -> modul.függvény() ként már megismeri
    - modulnál nem kell kiterjesztést írni 
    - egy beimportált modulnak lehet alias-t adni -> import modul as md
    - ha csak egy függvényt, vagy nem akarom a modult mindig leírni, akkor használhatunk -> from <modul> import <függvény>
        -> a függvény helyére lehetne *-ot is rakni, bad riddance
    - tudunk a modulba is egy tesztet írni, ha közvetlenül azt futtatjuk, akkor ez a __name__ == "__main__" alatti rész fut le
    
    - __name__ változó -> ha közvetlen futtatjuk akkor __main__ értékű
        -> modulként behivatkozva akkor a modul neve lesz -> import pygyak
        -> pygyak.__name__ -> pygyak
     
     
type annotation:
    "def add(a: int, b: int) -> int"
    - így csak integerekkel lenne helyes a függvény, azonban a python3 interpreter figyelmen kívül hagyja
    - a mypy project ezeket nézi (statikus elemző) -> nem futtatja a forráskódot
    - csak a teljesen annotált signatúrájú függvényeket elemzi, a többire nem dob hibát
    - from typing import List,Union,Tuple
    -> List[int], ha valamelyik két típus közül akkor Union[int, str], bármi Any, Optional[str] ez lehet none is = Union[None, str]
    - ha nagyon komplikált lenne meg lehet adni egy speciális megjegyzést # type : ignore
        
random számok:
    -
